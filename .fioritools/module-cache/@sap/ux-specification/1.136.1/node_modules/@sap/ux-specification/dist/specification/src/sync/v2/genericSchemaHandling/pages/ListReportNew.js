"use strict";
/**
 * @file This file hosts the entry point for generating the schema of a v2 List Report Page.
 * The schema is yet incomplete and is normally ignored by the runtime.
 * For manual tests it can be made active by switching useGenericSchemaHandling in pageAccess.ts to true.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListReportNew = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decorators_1 = require("../../../common/decoration/decorators");
const v2_1 = require("@sap/ux-specification-types/src/v2");
const utils_1 = require("../../generate/utils");
const utils_2 = require("../../utils");
// ListReportNew
let ListReportNew = class ListReportNew {
};
exports.ListReportNew = ListReportNew;
__decorate([
    (0, decorators_1.syncRule)({
        flex: {
            controlType: () => ux_specification_types_1.ControlType.DynamicPage
        },
        elementAdapter() {
            return {
                controlId: 'page'
            };
        }
    })
], ListReportNew.prototype, "fitContent", void 0);
exports.ListReportNew = ListReportNew = __decorate([
    (0, decorators_1.pageLayoutInformation)({
        id: v2_1.SAPUI5_VIEW_EXTENSION_LIST_REPORT,
        pageId: v2_1.FE_TEMPLATE_V2_LIST_REPORT
    }),
    (0, decorators_1.syncRule)({
        elementAdapter(element, schemaHandlingParams, generateParameters) {
            const manifestPathToPage = (0, utils_2.getManifestPathFromPagePath)(schemaHandlingParams.pageInfo.pagePath);
            const { entityType, uIAnnotations } = (0, utils_1.getUIAnnotationForEntitySet)(generateParameters); // would log an error in case these entities are missing
            const { value: settings } = (0, utils_2.getManifestPropertyByPath)(generateParameters.manifest, manifestPathToPage);
            const specificParams = {
                settings: settings,
                entityType,
                uIAnnotations
            };
            // Further processing will be done on level of properties of this class
            return {
                referenceAdaptation: {
                    specificParams
                }
            };
        }
    })
], ListReportNew);
//# sourceMappingURL=ListReportNew.js.map