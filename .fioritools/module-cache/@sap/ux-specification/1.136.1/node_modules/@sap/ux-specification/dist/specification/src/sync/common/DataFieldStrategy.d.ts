import type { DataFieldAbstractTypes } from '@sap-ux/vocabularies-types/vocabularies/UI';
import { UIAnnotationTypes } from '@sap-ux/vocabularies-types/vocabularies/UI';
import type { EntityType } from '@sap-ux/vocabularies-types';
import { type AddDefinitionParams } from './generate/objectPage';
import { type AddLineItemDefinitionParams } from '../v4/utils/utils';
export declare abstract class DataFieldStrategy {
    /**
     * Generates a stable identifier based on the provided data field.
     *
     * @param {DataFieldAbstractTypes} dataField - The data field used to generate the stable identifier.
     * @returns {string | undefined} A stable identifier as a string if successful, or undefined if the generation fails.
     */
    generateStableId?(dataField: DataFieldAbstractTypes): string | undefined;
    /**
     * Generates a descriptive string or value based on the provided data field, entity type, and data field label.
     *
     * @param {DataFieldAbstractTypes} dataField - The abstract type representation of the data field used to generate the description.
     * @param {EntityType} entityType - The type of entity associated with the data field.
     */
    generateDescription?(dataField: DataFieldAbstractTypes, entityType: EntityType): string;
    /**
     * Adds a new definition based on the provided parameters.
     *
     * @param {AddDefinitionParams} data - An object containing the parameters required to add the definition.
     * @returns {void}
     */
    addDefinition?(data: AddDefinitionParams): void;
    /**
     * Adds a new line item definition to the system based on the provided parameters.
     *
     * @param {AddLineItemDefinitionParams} data - The parameters used to define the new line item.
     * @returns {void} Does not return a value.
     */
    addLineItemDefinition?(data: AddLineItemDefinitionParams): void;
}
export declare class DataFieldStrategyContext {
    private strategies;
    /**
     * Constructor to initialize the strategies map with various UIAnnotationTypes and their corresponding strategies.
     * It registers predefined strategies to handle different UI annotation types by mapping each type
     * to the appropriate strategy instance.
     *
     * @returns {void} Initializes the strategies map with registered strategies. Does not return any value.
     */
    constructor();
    /**
     * Registers a strategy for a specific type of data field.
     *
     * @param {string} type - The type of data field to associate with the strategy.
     * @param {DataFieldStrategy} strategy - The strategy to be registered for the specified type.
     * @returns {void} This method does not return a value.
     */
    registerStrategy(type: UIAnnotationTypes, strategy: DataFieldStrategy): void;
    /**
     * Retrieves the strategy associated with the given type.
     *
     * @param {string} type - The key representing the type of strategy to retrieve.
     * @returns {DataFieldStrategy | undefined} The strategy corresponding to the provided type, or undefined if no strategy is found.
     */
    getStrategy(type: UIAnnotationTypes): DataFieldStrategy | undefined;
}
export declare const dataFieldStrategyContext: DataFieldStrategyContext;
//# sourceMappingURL=DataFieldStrategy.d.ts.map